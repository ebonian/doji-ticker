/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.CmdGetPropertyCount', null, global);
goog.exportSymbol('proto.CmdGetPropertyValues', null, global);
goog.exportSymbol('proto.CmdSetPropertyValues', null, global);
goog.exportSymbol('proto.LocalCtrlMessage', null, global);
goog.exportSymbol('proto.LocalCtrlMsgType', null, global);
goog.exportSymbol('proto.PropertyInfo', null, global);
goog.exportSymbol('proto.PropertyValue', null, global);
goog.exportSymbol('proto.RespGetPropertyCount', null, global);
goog.exportSymbol('proto.RespGetPropertyValues', null, global);
goog.exportSymbol('proto.RespSetPropertyValues', null, global);
goog.exportSymbol('proto.Status', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CmdGetPropertyCount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CmdGetPropertyCount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CmdGetPropertyCount.displayName = 'proto.CmdGetPropertyCount';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CmdGetPropertyCount.prototype.toObject = function(opt_includeInstance) {
  return proto.CmdGetPropertyCount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CmdGetPropertyCount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CmdGetPropertyCount.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CmdGetPropertyCount}
 */
proto.CmdGetPropertyCount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CmdGetPropertyCount;
  return proto.CmdGetPropertyCount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CmdGetPropertyCount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CmdGetPropertyCount}
 */
proto.CmdGetPropertyCount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CmdGetPropertyCount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CmdGetPropertyCount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CmdGetPropertyCount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CmdGetPropertyCount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RespGetPropertyCount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RespGetPropertyCount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RespGetPropertyCount.displayName = 'proto.RespGetPropertyCount';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RespGetPropertyCount.prototype.toObject = function(opt_includeInstance) {
  return proto.RespGetPropertyCount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RespGetPropertyCount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RespGetPropertyCount.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    count: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RespGetPropertyCount}
 */
proto.RespGetPropertyCount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RespGetPropertyCount;
  return proto.RespGetPropertyCount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RespGetPropertyCount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RespGetPropertyCount}
 */
proto.RespGetPropertyCount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RespGetPropertyCount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RespGetPropertyCount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RespGetPropertyCount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RespGetPropertyCount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional Status status = 1;
 * @return {!proto.Status}
 */
proto.RespGetPropertyCount.prototype.getStatus = function() {
  return /** @type {!proto.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Status} value */
proto.RespGetPropertyCount.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 count = 2;
 * @return {number}
 */
proto.RespGetPropertyCount.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.RespGetPropertyCount.prototype.setCount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PropertyInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PropertyInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PropertyInfo.displayName = 'proto.PropertyInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PropertyInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.PropertyInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PropertyInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PropertyInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    flags: jspb.Message.getFieldWithDefault(msg, 4, 0),
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PropertyInfo}
 */
proto.PropertyInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PropertyInfo;
  return proto.PropertyInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PropertyInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PropertyInfo}
 */
proto.PropertyInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlags(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PropertyInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PropertyInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PropertyInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PropertyInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getFlags();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional Status status = 1;
 * @return {!proto.Status}
 */
proto.PropertyInfo.prototype.getStatus = function() {
  return /** @type {!proto.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Status} value */
proto.PropertyInfo.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.PropertyInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.PropertyInfo.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 type = 3;
 * @return {number}
 */
proto.PropertyInfo.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.PropertyInfo.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 flags = 4;
 * @return {number}
 */
proto.PropertyInfo.prototype.getFlags = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.PropertyInfo.prototype.setFlags = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes value = 5;
 * @return {!(string|Uint8Array)}
 */
proto.PropertyInfo.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes value = 5;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.PropertyInfo.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.PropertyInfo.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/** @param {!(string|Uint8Array)} value */
proto.PropertyInfo.prototype.setValue = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CmdGetPropertyValues = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.CmdGetPropertyValues.repeatedFields_, null);
};
goog.inherits(proto.CmdGetPropertyValues, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CmdGetPropertyValues.displayName = 'proto.CmdGetPropertyValues';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.CmdGetPropertyValues.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CmdGetPropertyValues.prototype.toObject = function(opt_includeInstance) {
  return proto.CmdGetPropertyValues.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CmdGetPropertyValues} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CmdGetPropertyValues.toObject = function(includeInstance, msg) {
  var f, obj = {
    indicesList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CmdGetPropertyValues}
 */
proto.CmdGetPropertyValues.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CmdGetPropertyValues;
  return proto.CmdGetPropertyValues.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CmdGetPropertyValues} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CmdGetPropertyValues}
 */
proto.CmdGetPropertyValues.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setIndicesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CmdGetPropertyValues.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CmdGetPropertyValues.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CmdGetPropertyValues} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CmdGetPropertyValues.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndicesList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 indices = 1;
 * @return {!Array<number>}
 */
proto.CmdGetPropertyValues.prototype.getIndicesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.CmdGetPropertyValues.prototype.setIndicesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.CmdGetPropertyValues.prototype.addIndices = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.CmdGetPropertyValues.prototype.clearIndicesList = function() {
  this.setIndicesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RespGetPropertyValues = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.RespGetPropertyValues.repeatedFields_, null);
};
goog.inherits(proto.RespGetPropertyValues, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RespGetPropertyValues.displayName = 'proto.RespGetPropertyValues';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.RespGetPropertyValues.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RespGetPropertyValues.prototype.toObject = function(opt_includeInstance) {
  return proto.RespGetPropertyValues.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RespGetPropertyValues} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RespGetPropertyValues.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    propsList: jspb.Message.toObjectList(msg.getPropsList(),
    proto.PropertyInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RespGetPropertyValues}
 */
proto.RespGetPropertyValues.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RespGetPropertyValues;
  return proto.RespGetPropertyValues.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RespGetPropertyValues} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RespGetPropertyValues}
 */
proto.RespGetPropertyValues.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = new proto.PropertyInfo;
      reader.readMessage(value,proto.PropertyInfo.deserializeBinaryFromReader);
      msg.addProps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RespGetPropertyValues.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RespGetPropertyValues.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RespGetPropertyValues} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RespGetPropertyValues.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPropsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.PropertyInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional Status status = 1;
 * @return {!proto.Status}
 */
proto.RespGetPropertyValues.prototype.getStatus = function() {
  return /** @type {!proto.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Status} value */
proto.RespGetPropertyValues.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated PropertyInfo props = 2;
 * @return {!Array<!proto.PropertyInfo>}
 */
proto.RespGetPropertyValues.prototype.getPropsList = function() {
  return /** @type{!Array<!proto.PropertyInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PropertyInfo, 2));
};


/** @param {!Array<!proto.PropertyInfo>} value */
proto.RespGetPropertyValues.prototype.setPropsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.PropertyInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PropertyInfo}
 */
proto.RespGetPropertyValues.prototype.addProps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.PropertyInfo, opt_index);
};


proto.RespGetPropertyValues.prototype.clearPropsList = function() {
  this.setPropsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PropertyValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PropertyValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PropertyValue.displayName = 'proto.PropertyValue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PropertyValue.prototype.toObject = function(opt_includeInstance) {
  return proto.PropertyValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PropertyValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PropertyValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PropertyValue}
 */
proto.PropertyValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PropertyValue;
  return proto.PropertyValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PropertyValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PropertyValue}
 */
proto.PropertyValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PropertyValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PropertyValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PropertyValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PropertyValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional uint32 index = 1;
 * @return {number}
 */
proto.PropertyValue.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.PropertyValue.prototype.setIndex = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes value = 2;
 * @return {!(string|Uint8Array)}
 */
proto.PropertyValue.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes value = 2;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.PropertyValue.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.PropertyValue.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/** @param {!(string|Uint8Array)} value */
proto.PropertyValue.prototype.setValue = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CmdSetPropertyValues = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.CmdSetPropertyValues.repeatedFields_, null);
};
goog.inherits(proto.CmdSetPropertyValues, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CmdSetPropertyValues.displayName = 'proto.CmdSetPropertyValues';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.CmdSetPropertyValues.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CmdSetPropertyValues.prototype.toObject = function(opt_includeInstance) {
  return proto.CmdSetPropertyValues.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CmdSetPropertyValues} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CmdSetPropertyValues.toObject = function(includeInstance, msg) {
  var f, obj = {
    propsList: jspb.Message.toObjectList(msg.getPropsList(),
    proto.PropertyValue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CmdSetPropertyValues}
 */
proto.CmdSetPropertyValues.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CmdSetPropertyValues;
  return proto.CmdSetPropertyValues.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CmdSetPropertyValues} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CmdSetPropertyValues}
 */
proto.CmdSetPropertyValues.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PropertyValue;
      reader.readMessage(value,proto.PropertyValue.deserializeBinaryFromReader);
      msg.addProps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CmdSetPropertyValues.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CmdSetPropertyValues.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CmdSetPropertyValues} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CmdSetPropertyValues.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPropsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.PropertyValue.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PropertyValue props = 1;
 * @return {!Array<!proto.PropertyValue>}
 */
proto.CmdSetPropertyValues.prototype.getPropsList = function() {
  return /** @type{!Array<!proto.PropertyValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PropertyValue, 1));
};


/** @param {!Array<!proto.PropertyValue>} value */
proto.CmdSetPropertyValues.prototype.setPropsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.PropertyValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PropertyValue}
 */
proto.CmdSetPropertyValues.prototype.addProps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.PropertyValue, opt_index);
};


proto.CmdSetPropertyValues.prototype.clearPropsList = function() {
  this.setPropsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RespSetPropertyValues = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RespSetPropertyValues, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RespSetPropertyValues.displayName = 'proto.RespSetPropertyValues';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RespSetPropertyValues.prototype.toObject = function(opt_includeInstance) {
  return proto.RespSetPropertyValues.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RespSetPropertyValues} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RespSetPropertyValues.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RespSetPropertyValues}
 */
proto.RespSetPropertyValues.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RespSetPropertyValues;
  return proto.RespSetPropertyValues.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RespSetPropertyValues} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RespSetPropertyValues}
 */
proto.RespSetPropertyValues.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RespSetPropertyValues.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RespSetPropertyValues.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RespSetPropertyValues} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RespSetPropertyValues.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional Status status = 1;
 * @return {!proto.Status}
 */
proto.RespSetPropertyValues.prototype.getStatus = function() {
  return /** @type {!proto.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Status} value */
proto.RespSetPropertyValues.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LocalCtrlMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.LocalCtrlMessage.oneofGroups_);
};
goog.inherits(proto.LocalCtrlMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LocalCtrlMessage.displayName = 'proto.LocalCtrlMessage';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.LocalCtrlMessage.oneofGroups_ = [[10,11,12,13,14,15]];

/**
 * @enum {number}
 */
proto.LocalCtrlMessage.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  CMD_GET_PROP_COUNT: 10,
  RESP_GET_PROP_COUNT: 11,
  CMD_GET_PROP_VALS: 12,
  RESP_GET_PROP_VALS: 13,
  CMD_SET_PROP_VALS: 14,
  RESP_SET_PROP_VALS: 15
};

/**
 * @return {proto.LocalCtrlMessage.PayloadCase}
 */
proto.LocalCtrlMessage.prototype.getPayloadCase = function() {
  return /** @type {proto.LocalCtrlMessage.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.LocalCtrlMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LocalCtrlMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.LocalCtrlMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LocalCtrlMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LocalCtrlMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    msg: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cmdGetPropCount: (f = msg.getCmdGetPropCount()) && proto.CmdGetPropertyCount.toObject(includeInstance, f),
    respGetPropCount: (f = msg.getRespGetPropCount()) && proto.RespGetPropertyCount.toObject(includeInstance, f),
    cmdGetPropVals: (f = msg.getCmdGetPropVals()) && proto.CmdGetPropertyValues.toObject(includeInstance, f),
    respGetPropVals: (f = msg.getRespGetPropVals()) && proto.RespGetPropertyValues.toObject(includeInstance, f),
    cmdSetPropVals: (f = msg.getCmdSetPropVals()) && proto.CmdSetPropertyValues.toObject(includeInstance, f),
    respSetPropVals: (f = msg.getRespSetPropVals()) && proto.RespSetPropertyValues.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LocalCtrlMessage}
 */
proto.LocalCtrlMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LocalCtrlMessage;
  return proto.LocalCtrlMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LocalCtrlMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LocalCtrlMessage}
 */
proto.LocalCtrlMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.LocalCtrlMsgType} */ (reader.readEnum());
      msg.setMsg(value);
      break;
    case 10:
      var value = new proto.CmdGetPropertyCount;
      reader.readMessage(value,proto.CmdGetPropertyCount.deserializeBinaryFromReader);
      msg.setCmdGetPropCount(value);
      break;
    case 11:
      var value = new proto.RespGetPropertyCount;
      reader.readMessage(value,proto.RespGetPropertyCount.deserializeBinaryFromReader);
      msg.setRespGetPropCount(value);
      break;
    case 12:
      var value = new proto.CmdGetPropertyValues;
      reader.readMessage(value,proto.CmdGetPropertyValues.deserializeBinaryFromReader);
      msg.setCmdGetPropVals(value);
      break;
    case 13:
      var value = new proto.RespGetPropertyValues;
      reader.readMessage(value,proto.RespGetPropertyValues.deserializeBinaryFromReader);
      msg.setRespGetPropVals(value);
      break;
    case 14:
      var value = new proto.CmdSetPropertyValues;
      reader.readMessage(value,proto.CmdSetPropertyValues.deserializeBinaryFromReader);
      msg.setCmdSetPropVals(value);
      break;
    case 15:
      var value = new proto.RespSetPropertyValues;
      reader.readMessage(value,proto.RespSetPropertyValues.deserializeBinaryFromReader);
      msg.setRespSetPropVals(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LocalCtrlMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LocalCtrlMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LocalCtrlMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LocalCtrlMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsg();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCmdGetPropCount();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.CmdGetPropertyCount.serializeBinaryToWriter
    );
  }
  f = message.getRespGetPropCount();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.RespGetPropertyCount.serializeBinaryToWriter
    );
  }
  f = message.getCmdGetPropVals();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.CmdGetPropertyValues.serializeBinaryToWriter
    );
  }
  f = message.getRespGetPropVals();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.RespGetPropertyValues.serializeBinaryToWriter
    );
  }
  f = message.getCmdSetPropVals();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.CmdSetPropertyValues.serializeBinaryToWriter
    );
  }
  f = message.getRespSetPropVals();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.RespSetPropertyValues.serializeBinaryToWriter
    );
  }
};


/**
 * optional LocalCtrlMsgType msg = 1;
 * @return {!proto.LocalCtrlMsgType}
 */
proto.LocalCtrlMessage.prototype.getMsg = function() {
  return /** @type {!proto.LocalCtrlMsgType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.LocalCtrlMsgType} value */
proto.LocalCtrlMessage.prototype.setMsg = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional CmdGetPropertyCount cmd_get_prop_count = 10;
 * @return {?proto.CmdGetPropertyCount}
 */
proto.LocalCtrlMessage.prototype.getCmdGetPropCount = function() {
  return /** @type{?proto.CmdGetPropertyCount} */ (
    jspb.Message.getWrapperField(this, proto.CmdGetPropertyCount, 10));
};


/** @param {?proto.CmdGetPropertyCount|undefined} value */
proto.LocalCtrlMessage.prototype.setCmdGetPropCount = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.LocalCtrlMessage.oneofGroups_[0], value);
};


proto.LocalCtrlMessage.prototype.clearCmdGetPropCount = function() {
  this.setCmdGetPropCount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LocalCtrlMessage.prototype.hasCmdGetPropCount = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional RespGetPropertyCount resp_get_prop_count = 11;
 * @return {?proto.RespGetPropertyCount}
 */
proto.LocalCtrlMessage.prototype.getRespGetPropCount = function() {
  return /** @type{?proto.RespGetPropertyCount} */ (
    jspb.Message.getWrapperField(this, proto.RespGetPropertyCount, 11));
};


/** @param {?proto.RespGetPropertyCount|undefined} value */
proto.LocalCtrlMessage.prototype.setRespGetPropCount = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.LocalCtrlMessage.oneofGroups_[0], value);
};


proto.LocalCtrlMessage.prototype.clearRespGetPropCount = function() {
  this.setRespGetPropCount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LocalCtrlMessage.prototype.hasRespGetPropCount = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional CmdGetPropertyValues cmd_get_prop_vals = 12;
 * @return {?proto.CmdGetPropertyValues}
 */
proto.LocalCtrlMessage.prototype.getCmdGetPropVals = function() {
  return /** @type{?proto.CmdGetPropertyValues} */ (
    jspb.Message.getWrapperField(this, proto.CmdGetPropertyValues, 12));
};


/** @param {?proto.CmdGetPropertyValues|undefined} value */
proto.LocalCtrlMessage.prototype.setCmdGetPropVals = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.LocalCtrlMessage.oneofGroups_[0], value);
};


proto.LocalCtrlMessage.prototype.clearCmdGetPropVals = function() {
  this.setCmdGetPropVals(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LocalCtrlMessage.prototype.hasCmdGetPropVals = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional RespGetPropertyValues resp_get_prop_vals = 13;
 * @return {?proto.RespGetPropertyValues}
 */
proto.LocalCtrlMessage.prototype.getRespGetPropVals = function() {
  return /** @type{?proto.RespGetPropertyValues} */ (
    jspb.Message.getWrapperField(this, proto.RespGetPropertyValues, 13));
};


/** @param {?proto.RespGetPropertyValues|undefined} value */
proto.LocalCtrlMessage.prototype.setRespGetPropVals = function(value) {
  jspb.Message.setOneofWrapperField(this, 13, proto.LocalCtrlMessage.oneofGroups_[0], value);
};


proto.LocalCtrlMessage.prototype.clearRespGetPropVals = function() {
  this.setRespGetPropVals(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LocalCtrlMessage.prototype.hasRespGetPropVals = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional CmdSetPropertyValues cmd_set_prop_vals = 14;
 * @return {?proto.CmdSetPropertyValues}
 */
proto.LocalCtrlMessage.prototype.getCmdSetPropVals = function() {
  return /** @type{?proto.CmdSetPropertyValues} */ (
    jspb.Message.getWrapperField(this, proto.CmdSetPropertyValues, 14));
};


/** @param {?proto.CmdSetPropertyValues|undefined} value */
proto.LocalCtrlMessage.prototype.setCmdSetPropVals = function(value) {
  jspb.Message.setOneofWrapperField(this, 14, proto.LocalCtrlMessage.oneofGroups_[0], value);
};


proto.LocalCtrlMessage.prototype.clearCmdSetPropVals = function() {
  this.setCmdSetPropVals(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LocalCtrlMessage.prototype.hasCmdSetPropVals = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional RespSetPropertyValues resp_set_prop_vals = 15;
 * @return {?proto.RespSetPropertyValues}
 */
proto.LocalCtrlMessage.prototype.getRespSetPropVals = function() {
  return /** @type{?proto.RespSetPropertyValues} */ (
    jspb.Message.getWrapperField(this, proto.RespSetPropertyValues, 15));
};


/** @param {?proto.RespSetPropertyValues|undefined} value */
proto.LocalCtrlMessage.prototype.setRespSetPropVals = function(value) {
  jspb.Message.setOneofWrapperField(this, 15, proto.LocalCtrlMessage.oneofGroups_[0], value);
};


proto.LocalCtrlMessage.prototype.clearRespSetPropVals = function() {
  this.setRespSetPropVals(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LocalCtrlMessage.prototype.hasRespSetPropVals = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * @enum {number}
 */
proto.Status = {
  SUCCESS: 0,
  INVALIDSECSCHEME: 1,
  INVALIDPROTO: 2,
  TOOMANYSESSIONS: 3,
  INVALIDARGUMENT: 4,
  INTERNALERROR: 5,
  CRYPTOERROR: 6,
  INVALIDSESSION: 7
};

/**
 * @enum {number}
 */
proto.LocalCtrlMsgType = {
  TYPECMDGETPROPERTYCOUNT: 0,
  TYPERESPGETPROPERTYCOUNT: 1,
  TYPECMDGETPROPERTYVALUES: 4,
  TYPERESPGETPROPERTYVALUES: 5,
  TYPECMDSETPROPERTYVALUES: 6,
  TYPERESPSETPROPERTYVALUES: 7
};

goog.object.extend(exports, proto);
